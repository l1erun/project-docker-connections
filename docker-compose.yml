version: '3.8'

services:
  # PostgreSQL для Auth Service
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: authdb
    ports:
      - '5433:5432'  # Обратите внимание на порт
    volumes:
      - pgdata-auth:/var/lib/postgresql/data
#      - ./initdb/auth:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL для Player Service
  postgres-player:
    image: postgres:15
    container_name: postgres-player
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: playerdb
    ports:
      - '5434:5432'
    volumes:
      - pgdata-player:/var/lib/postgresql/data
#      - ./initdb/player:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL для Card Service
  postgres-card:
    image: postgres:15
    container_name: postgres-card
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: carddb
    ports:
      - '5435:5432'
    volumes:
      - pgdata-card:/var/lib/postgresql/data
#      - ./initdb/card:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL для Notification Service
  postgres-notification:
    image: postgres:15
    container_name: postgres-notification
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: notificationdb
    ports:
      - '5436:5432'
    volumes:
      - pgdata-notification:/var/lib/postgresql/data
#      - ./initdb/notification:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - backend

  zookeeper:
    image: bitnami/zookeeper:3
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - backend

  kafka:
      image: bitnami/kafka:3
      container_name: kafka
      depends_on:
        - zookeeper
      environment:
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
        - KAFKA_BROKER_ID=1
      ports:
        - '9092:9092'
      networks:
        - backend

volumes:
  pgdata-auth:
  pgdata-player:
  pgdata-card:
  pgdata-notification:

networks:
  backend:

